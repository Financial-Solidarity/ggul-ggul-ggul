package com.ggul.application.equipment.infra;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class EquipmentNFTContract extends Contract {
    public static final String BINARY = "0x60a06040523480156200001157600080fd5b5060405162002f2038038062002f208339818101604052810190620000379190620003a1565b6040518060400160405280600981526020017f45717569706d656e7400000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e465400000000000000000000000000000000000000000000000000000000008152508160009081620000b491906200065d565b508060019081620000c691906200065d565b50505082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600790816200015c91906200065d565b50806080818152505050505062000744565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001af8262000182565b9050919050565b620001c181620001a2565b8114620001cd57600080fd5b50565b600081519050620001e181620001b6565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200023c82620001f1565b810181811067ffffffffffffffff821117156200025e576200025d62000202565b5b80604052505050565b6000620002736200016e565b905062000281828262000231565b919050565b600067ffffffffffffffff821115620002a457620002a362000202565b5b620002af82620001f1565b9050602081019050919050565b60005b83811015620002dc578082015181840152602081019050620002bf565b60008484015250505050565b6000620002ff620002f98462000286565b62000267565b9050828152602081018484840111156200031e576200031d620001ec565b5b6200032b848285620002bc565b509392505050565b600082601f8301126200034b576200034a620001e7565b5b81516200035d848260208601620002e8565b91505092915050565b6000819050919050565b6200037b8162000366565b81146200038757600080fd5b50565b6000815190506200039b8162000370565b92915050565b600080600060608486031215620003bd57620003bc62000178565b5b6000620003cd86828701620001d0565b935050602084015167ffffffffffffffff811115620003f157620003f06200017d565b5b620003ff8682870162000333565b925050604062000412868287016200038a565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200046f57607f821691505b60208210810362000485576200048462000427565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004ef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004b0565b620004fb8683620004b0565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200053e62000538620005328462000366565b62000513565b62000366565b9050919050565b6000819050919050565b6200055a836200051d565b62000572620005698262000545565b848454620004bd565b825550505050565b600090565b620005896200057a565b620005968184846200054f565b505050565b5b81811015620005be57620005b26000826200057f565b6001810190506200059c565b5050565b601f8211156200060d57620005d7816200048b565b620005e284620004a0565b81016020851015620005f2578190505b6200060a6200060185620004a0565b8301826200059b565b50505b505050565b600082821c905092915050565b6000620006326000198460080262000612565b1980831691505092915050565b60006200064d83836200061f565b9150826002028217905092915050565b62000668826200041c565b67ffffffffffffffff81111562000684576200068362000202565b5b62000690825462000456565b6200069d828285620005c2565b600060209050601f831160018114620006d55760008415620006c0578287015190505b620006cc85826200063f565b8655506200073c565b601f198416620006e5866200048b565b60005b828110156200070f57848901518255600182019150602085019450602081019050620006e8565b868310156200072f57848901516200072b601f8916826200061f565b8355505b6001600288020188555050505b505050505050565b6080516127b26200076e600039600081816108a30152818161098a0152610a9101526127b26000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636352211e116100a2578063b88d4fde11610071578063b88d4fde146102c8578063bf8fbbd2146102e4578063c87b56dd14610302578063d0def52114610332578063e985e9c51461034e5761010b565b80636352211e1461022e57806370a082311461025e57806395d89b411461028e578063a22cb465146102ac5761010b565b806317987ca5116100de57806317987ca5146101aa57806323b872dd146101da578063397bfa92146101f657806342842e0e146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611c0a565b61037e565b6040516101379190611c52565b60405180910390f35b610148610460565b6040516101559190611cfd565b60405180910390f35b61017860048036038101906101739190611d55565b6104f2565b6040516101859190611dc3565b60405180910390f35b6101a860048036038101906101a39190611e0a565b61050e565b005b6101c460048036038101906101bf9190611f7f565b610524565b6040516101d19190611cfd565b60405180910390f35b6101f460048036038101906101ef9190611fc8565b61057c565b005b610210600480360381019061020b919061201b565b61067e565b005b61022c60048036038101906102279190611fc8565b6106f0565b005b61024860048036038101906102439190611d55565b610710565b6040516102559190611dc3565b60405180910390f35b6102786004803603810190610273919061208a565b610722565b60405161028591906120c6565b60405180910390f35b6102966107dc565b6040516102a39190611cfd565b60405180910390f35b6102c660048036038101906102c1919061210d565b61086e565b005b6102e260048036038101906102dd91906121ee565b610884565b005b6102ec6108a1565b6040516102f991906120c6565b60405180910390f35b61031c60048036038101906103179190611d55565b6108c5565b6040516103299190611cfd565b60405180910390f35b61034c60048036038101906103479190612271565b61092e565b005b610368600480360381019061036391906122cd565b610b6d565b6040516103759190611c52565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610459575061045882610c01565b5b9050919050565b60606000805461046f9061233c565b80601f016020809104026020016040519081016040528092919081815260200182805461049b9061233c565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b5050505050905090565b60006104fd82610c6b565b5061050782610cf3565b9050919050565b610520828261051b610d30565b610d38565b5050565b60606000600780546105359061233c565b9050116105515760405180602001604052806000815250610575565b600782604051602001610565929190612441565b6040516020818303038152906040525b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ee5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105e59190611dc3565b60405180910390fd5b600061060283836105fd610d30565b610d4a565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610678578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161066f93929190612465565b60405180910390fd5b50505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d857600080fd5b6106eb83836106e684610f64565b610fd8565b505050565b61070b83838360405180602001604052806000815250610884565b505050565b600061071b82610c6b565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107955760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161078c9190611dc3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546107eb9061233c565b80601f01602080910402602001604051908101604052809291908181526020018280546108179061233c565b80156108645780601f1061083957610100808354040283529160200191610864565b820191906000526020600020905b81548152906001019060200180831161084757829003601f168201915b5050505050905090565b610880610879610d30565b8383611145565b5050565b61088f84848461057c565b61089b848484846112b4565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606108d082610c6b565b5060006108db61146b565b905060008151116108fb5760405180602001604052806000815250610926565b80610905846114fd565b60405160200161091692919061249c565b6040516020818303038152906040525b915050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098857600080fd5b7f0000000000000000000000000000000000000000000000000000000000000000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610a049190611dc3565b602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4591906124d5565b1015610a5057600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663519888e4837f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610acd929190612502565b600060405180830381600087803b158015610ae757600080fd5b505af1158015610afb573d6000803e3d6000fd5b50505050610b1182610b0c83610f64565b6115cb565b8173ffffffffffffffffffffffffffffffffffffffff167fd564dcd93802bcef98cf67d3f543fcfd6deec61e552129a8d4bdb72817d4681b82610b5384610524565b604051610b6192919061252b565b60405180910390a25050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080610c77836116c4565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cea57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610ce191906120c6565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610d458383836001611701565b505050565b600080610d56846116c4565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610d9857610d978184866118c6565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e2957610dda600085600080611701565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610eac576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6000808290506000805b8251811015610fcd576030838281518110610f8c57610f8b612562565b5b602001015160f81c60f81b60f81c60ff16610fa791906125c0565b600a83610fb491906125f4565b610fbe9190612636565b91508080600101915050610f6e565b508092505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361104a5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016110419190611dc3565b60405180910390fd5b600061105883836000610d4a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110cb57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016110c291906120c6565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461113f578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161113693929190612465565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111b657816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016111ad9190611dc3565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112a79190611c52565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611465578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026112f8610d30565b8685856040518563ffffffff1660e01b815260040161131a94939291906126bf565b6020604051808303816000875af192505050801561135657506040513d601f19601f820116820180604052508101906113539190612720565b60015b6113da573d8060008114611386576040519150601f19603f3d011682016040523d82523d6000602084013e61138b565b606091505b5060008151036113d257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113c99190611dc3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461146357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161145a9190611dc3565b60405180910390fd5b505b50505050565b60606007805461147a9061233c565b80601f01602080910402602001604051908101604052809291908181526020018280546114a69061233c565b80156114f35780601f106114c8576101008083540402835291602001916114f3565b820191906000526020600020905b8154815290600101906020018083116114d657829003601f168201915b5050505050905090565b60606000600161150c8461198a565b01905060008167ffffffffffffffff81111561152b5761152a611e54565b5b6040519080825280601f01601f19166020018201604052801561155d5781602001600182028036833780820191505090505b509050600082602001820190505b6001156115c0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816115b4576115b361274d565b5b0494506000850361156b575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361163d5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016116349190611dc3565b60405180910390fd5b600061164b83836000610d4a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146116bf5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016116b69190611dc3565b60405180910390fd5b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061173a5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561186e57600061174a84610c6b565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156117b557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156117c857506117c68184610b6d565b155b1561180a57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016118019190611dc3565b60405180910390fd5b811561186c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6118d1838383611add565b61198557600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361194657806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161193d91906120c6565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161197c929190612502565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106119e8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816119de576119dd61274d565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611a25576d04ee2d6d415b85acef81000000008381611a1b57611a1a61274d565b5b0492506020810190505b662386f26fc100008310611a5457662386f26fc100008381611a4a57611a4961274d565b5b0492506010810190505b6305f5e1008310611a7d576305f5e1008381611a7357611a7261274d565b5b0492506008810190505b6127108310611aa2576127108381611a9857611a9761274d565b5b0492506004810190505b60648310611ac55760648381611abb57611aba61274d565b5b0492506002810190505b600a8310611ad4576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b9557508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b565750611b558484610b6d565b5b80611b9457508273ffffffffffffffffffffffffffffffffffffffff16611b7c83610cf3565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611be781611bb2565b8114611bf257600080fd5b50565b600081359050611c0481611bde565b92915050565b600060208284031215611c2057611c1f611ba8565b5b6000611c2e84828501611bf5565b91505092915050565b60008115159050919050565b611c4c81611c37565b82525050565b6000602082019050611c676000830184611c43565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ca7578082015181840152602081019050611c8c565b60008484015250505050565b6000601f19601f8301169050919050565b6000611ccf82611c6d565b611cd98185611c78565b9350611ce9818560208601611c89565b611cf281611cb3565b840191505092915050565b60006020820190508181036000830152611d178184611cc4565b905092915050565b6000819050919050565b611d3281611d1f565b8114611d3d57600080fd5b50565b600081359050611d4f81611d29565b92915050565b600060208284031215611d6b57611d6a611ba8565b5b6000611d7984828501611d40565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dad82611d82565b9050919050565b611dbd81611da2565b82525050565b6000602082019050611dd86000830184611db4565b92915050565b611de781611da2565b8114611df257600080fd5b50565b600081359050611e0481611dde565b92915050565b60008060408385031215611e2157611e20611ba8565b5b6000611e2f85828601611df5565b9250506020611e4085828601611d40565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e8c82611cb3565b810181811067ffffffffffffffff82111715611eab57611eaa611e54565b5b80604052505050565b6000611ebe611b9e565b9050611eca8282611e83565b919050565b600067ffffffffffffffff821115611eea57611ee9611e54565b5b611ef382611cb3565b9050602081019050919050565b82818337600083830152505050565b6000611f22611f1d84611ecf565b611eb4565b905082815260208101848484011115611f3e57611f3d611e4f565b5b611f49848285611f00565b509392505050565b600082601f830112611f6657611f65611e4a565b5b8135611f76848260208601611f0f565b91505092915050565b600060208284031215611f9557611f94611ba8565b5b600082013567ffffffffffffffff811115611fb357611fb2611bad565b5b611fbf84828501611f51565b91505092915050565b600080600060608486031215611fe157611fe0611ba8565b5b6000611fef86828701611df5565b935050602061200086828701611df5565b925050604061201186828701611d40565b9150509250925092565b60008060006060848603121561203457612033611ba8565b5b600061204286828701611df5565b935050602061205386828701611df5565b925050604084013567ffffffffffffffff81111561207457612073611bad565b5b61208086828701611f51565b9150509250925092565b6000602082840312156120a05761209f611ba8565b5b60006120ae84828501611df5565b91505092915050565b6120c081611d1f565b82525050565b60006020820190506120db60008301846120b7565b92915050565b6120ea81611c37565b81146120f557600080fd5b50565b600081359050612107816120e1565b92915050565b6000806040838503121561212457612123611ba8565b5b600061213285828601611df5565b9250506020612143858286016120f8565b9150509250929050565b600067ffffffffffffffff82111561216857612167611e54565b5b61217182611cb3565b9050602081019050919050565b600061219161218c8461214d565b611eb4565b9050828152602081018484840111156121ad576121ac611e4f565b5b6121b8848285611f00565b509392505050565b600082601f8301126121d5576121d4611e4a565b5b81356121e584826020860161217e565b91505092915050565b6000806000806080858703121561220857612207611ba8565b5b600061221687828801611df5565b945050602061222787828801611df5565b935050604061223887828801611d40565b925050606085013567ffffffffffffffff81111561225957612258611bad565b5b612265878288016121c0565b91505092959194509250565b6000806040838503121561228857612287611ba8565b5b600061229685828601611df5565b925050602083013567ffffffffffffffff8111156122b7576122b6611bad565b5b6122c385828601611f51565b9150509250929050565b600080604083850312156122e4576122e3611ba8565b5b60006122f285828601611df5565b925050602061230385828601611df5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061235457607f821691505b6020821081036123675761236661230d565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461239a8161233c565b6123a4818661236d565b945060018216600081146123bf57600181146123d457612407565b60ff1983168652811515820286019350612407565b6123dd85612378565b60005b838110156123ff578154818901526001820191506020810190506123e0565b838801955050505b50505092915050565b600061241b82611c6d565b612425818561236d565b9350612435818560208601611c89565b80840191505092915050565b600061244d828561238d565b91506124598284612410565b91508190509392505050565b600060608201905061247a6000830186611db4565b61248760208301856120b7565b6124946040830184611db4565b949350505050565b60006124a88285612410565b91506124b48284612410565b91508190509392505050565b6000815190506124cf81611d29565b92915050565b6000602082840312156124eb576124ea611ba8565b5b60006124f9848285016124c0565b91505092915050565b60006040820190506125176000830185611db4565b61252460208301846120b7565b9392505050565b600060408201905081810360008301526125458185611cc4565b905081810360208301526125598184611cc4565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125cb82611d1f565b91506125d683611d1f565b92508282039050818111156125ee576125ed612591565b5b92915050565b60006125ff82611d1f565b915061260a83611d1f565b925082820261261881611d1f565b9150828204841483151761262f5761262e612591565b5b5092915050565b600061264182611d1f565b915061264c83611d1f565b925082820190508082111561266457612663612591565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006126918261266a565b61269b8185612675565b93506126ab818560208601611c89565b6126b481611cb3565b840191505092915050565b60006080820190506126d46000830187611db4565b6126e16020830186611db4565b6126ee60408301856120b7565b81810360608301526127008184612686565b905095945050505050565b60008151905061271a81611bde565b92915050565b60006020828403121561273657612735611ba8565b5b60006127448482850161270b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220fc3436d6ba733837abbdf13eadb014eb186287659d6670906ef53031ba61e00c64736f6c63430008180033";

    private static String librariesLinkedBinary;

    public static final String FUNC_COST = "COST";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NFTURI = "nftURI";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MINTRESULT_EVENT = new Event("MintResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected EquipmentNFTContract(String contractAddress, Web3j web3j, Credentials credentials,
                                   BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EquipmentNFTContract(String contractAddress, Web3j web3j, Credentials credentials,
                                   ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EquipmentNFTContract(String contractAddress, Web3j web3j,
                                   TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EquipmentNFTContract(String contractAddress, Web3j web3j,
                                   TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<MintResultEventResponse> getMintResultEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINTRESULT_EVENT, transactionReceipt);
        ArrayList<MintResultEventResponse> responses = new ArrayList<MintResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintResultEventResponse typedResponse = new MintResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsCID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MintResultEventResponse getMintResultEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MINTRESULT_EVENT, log);
        MintResultEventResponse typedResponse = new MintResultEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsCID = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.nftURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<MintResultEventResponse> mintResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMintResultEventFromLog(log));
    }

    public Flowable<MintResultEventResponse> mintResultEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTRESULT_EVENT));
        return mintResultEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> COST() {
        final Function function = new Function(FUNC_COST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                        new org.web3j.abi.datatypes.Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _owner, String _ipfsCID) {
        final Function function = new Function(
                FUNC_MINT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner),
                        new org.web3j.abi.datatypes.Utf8String(_ipfsCID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> nftURI(String ipfsCID) {
        final Function function = new Function(FUNC_NFTURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsCID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
                                                                   BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
                                                                   BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
                                                                    Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                        new org.web3j.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String _from, String _to,
                                                           String _ipfsCID) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _from),
                        new org.web3j.abi.datatypes.Address(160, _to),
                        new org.web3j.abi.datatypes.Utf8String(_ipfsCID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
                                                               BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static EquipmentNFTContract load(String contractAddress, Web3j web3j,
                                            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EquipmentNFTContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EquipmentNFTContract load(String contractAddress, Web3j web3j,
                                            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EquipmentNFTContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EquipmentNFTContract load(String contractAddress, Web3j web3j,
                                            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EquipmentNFTContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EquipmentNFTContract load(String contractAddress, Web3j web3j,
                                            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EquipmentNFTContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EquipmentNFTContract> deploy(Web3j web3j, Credentials credentials,
                                                          ContractGasProvider contractGasProvider, String _tokenContract, String _base,
                                                          BigInteger _cost) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract),
                new org.web3j.abi.datatypes.Utf8String(_base),
                new org.web3j.abi.datatypes.generated.Uint256(_cost)));
        return deployRemoteCall(EquipmentNFTContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<EquipmentNFTContract> deploy(Web3j web3j,
                                                          TransactionManager transactionManager, ContractGasProvider contractGasProvider,
                                                          String _tokenContract, String _base, BigInteger _cost) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract),
                new org.web3j.abi.datatypes.Utf8String(_base),
                new org.web3j.abi.datatypes.generated.Uint256(_cost)));
        return deployRemoteCall(EquipmentNFTContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<EquipmentNFTContract> deploy(Web3j web3j, Credentials credentials,
                                                          BigInteger gasPrice, BigInteger gasLimit, String _tokenContract, String _base,
                                                          BigInteger _cost) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract),
                new org.web3j.abi.datatypes.Utf8String(_base),
                new org.web3j.abi.datatypes.generated.Uint256(_cost)));
        return deployRemoteCall(EquipmentNFTContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<EquipmentNFTContract> deploy(Web3j web3j,
                                                          TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
                                                          String _tokenContract, String _base, BigInteger _cost) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract),
                new org.web3j.abi.datatypes.Utf8String(_base),
                new org.web3j.abi.datatypes.generated.Uint256(_cost)));
        return deployRemoteCall(EquipmentNFTContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class MintResultEventResponse extends BaseEventResponse {
        public String owner;

        public String ipfsCID;

        public String nftURI;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
